{
	"kind": "Template",
	"apiVersion": "v1",
	"metadata": {
		"name": "rhpam713-prod-immutable-kieserver-amq",
		"creationTimestamp": null,
		"annotations": {
			"description": "Application template for an immutable KIE Server in a production environment integrated with ActiveMQ, for Red Hat Process Automation Manager 7.13 - Deprecated",
			"iconClass": "icon-jboss",
			"openshift.io/display-name": "Red Hat Process Automation Manager 7.13 immutable production environment with ActiveMQ",
			"openshift.io/provider-display-name": "Red Hat, Inc.",
			"tags": "rhpam,processserver,jboss,kieserver,immutable,s2i,amq",
			"template.openshift.io/bindable": "false",
			"template.openshift.io/documentation-url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/deploying_a_red_hat_process_automation_manager_7.13_immutable_server_environment_on_red_hat_openshift_container_platform/",
			"template.openshift.io/long-description": "This template defines resources needed for a immutable production runtime environment for Red Hat Process Automation Manager 7.13, including a source-to-image (S2I) build of your services, application deployment configuration, secure and insecure http communication and persistent volume to store data that needs to survive to a restart. Template for Red Hat OpenShift Container Platform version 3.11. Deprecated since Red Hat Process Automation Manager version 7.5; consider using the Red Hat Business Automation Operator.",
			"template.openshift.io/support-url": "https://access.redhat.com",
			"version": "7.13"
		}
	},
	"message": "A new immutable Red Hat Process Automation Manager KIE Server have been created in your project.\nThe username/password needed for accessing the application are stored in \"${CREDENTIALS_SECRET}\" secret as\nKIE_ADMIN_USER and KIE_ADMIN_PWD\n\nYou must create the secret named \"${CREDENTIALS_SECRET}\" containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values and the secret named \"${KIE_SERVER_HTTPS_SECRET}\" containing the ${KIE_SERVER_HTTPS_KEYSTORE} file used for serving secure content.",
	"objects": [
		{
			"apiVersion": "v1",
			"kind": "ServiceAccount",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}-kieserver"
			}
		},
		{
			"apiVersion": "v1",
			"kind": "RoleBinding",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}-kieserver-edit"
			},
			"roleRef": {
				"name": "edit"
			},
			"subjects": [
				{
					"kind": "ServiceAccount",
					"name": "${APPLICATION_NAME}-kieserver"
				}
			]
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "All the KIE Server web server's ports."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-kieserver"
				},
				"name": "${APPLICATION_NAME}-kieserver"
			},
			"spec": {
				"ports": [
					{
						"name": "http",
						"port": 8080,
						"targetPort": 8080
					},
					{
						"name": "https",
						"port": 8443,
						"targetPort": 8443
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-kieserver"
				},
				"sessionAffinity": "ClientIP",
				"sessionAffinityConfig": {
					"clientIP": {
						"timeoutSeconds": 3600
					}
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's console and Jolokia port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-jolokia"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-jolokia",
						"port": 8161,
						"targetPort": 8161
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's AMQP port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-amqp"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-amqp",
						"port": 5672,
						"targetPort": 5672
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's AMQP SSL port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-amqp-ssl"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-amqp-ssl",
						"port": 5671,
						"targetPort": 5671
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's MQTT port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-mqtt"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-mqtt",
						"port": 1883,
						"targetPort": 1883
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's MQTT SSL port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-mqtt-ssl"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-mqtt-ssl",
						"port": 8883,
						"targetPort": 8883
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's STOMP port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-stomp"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-stomp",
						"port": 61613,
						"targetPort": 61613
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's STOMP SSL port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-stomp-ssl"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-stomp-ssl",
						"port": 61612,
						"targetPort": 61612
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's OpenWire port.",
					"service.alpha.openshift.io/dependencies": "[{\"name\": \"${APPLICATION_NAME}-amq-amqp\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-mqtt\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-stomp\", \"kind\": \"Service\"}]"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-tcp"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-tcp",
						"port": 61616,
						"targetPort": 61616
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The broker's OpenWire (SSL) port.",
					"service.alpha.openshift.io/dependencies": "[{\"name\": \"${APPLICATION_NAME}-amq-tcp\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-amqp\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-mqtt\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-stomp\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-amqp-ssl\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-mqtt-ssl\", \"kind\": \"Service\"},{\"name\": \"${APPLICATION_NAME}-amq-stomp-ssl\", \"kind\": \"Service\"}]"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq-tcp-ssl"
			},
			"spec": {
				"ports": [
					{
						"name": "amq-tcp-ssl",
						"port": 61617,
						"targetPort": 61617
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The database server's port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-postgresql"
				},
				"name": "${APPLICATION_NAME}-postgresql"
			},
			"spec": {
				"ports": [
					{
						"port": 5432,
						"targetPort": 5432
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-postgresql"
				}
			}
		},
		{
			"apiVersion": "v1",
			"id": "${APPLICATION_NAME}-kieserver-http",
			"kind": "Route",
			"metadata": {
				"annotations": {
					"description": "Route for KIE Server's http service.",
					"haproxy.router.openshift.io/balance": "source"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-kieserver"
				},
				"name": "insecure-${APPLICATION_NAME}-kieserver"
			},
			"spec": {
				"host": "${KIE_SERVER_HOSTNAME_HTTP}",
				"port": {
					"targetPort": "http"
				},
				"to": {
					"name": "${APPLICATION_NAME}-kieserver"
				}
			}
		},
		{
			"apiVersion": "v1",
			"id": "${APPLICATION_NAME}-kieserver-https",
			"kind": "Route",
			"metadata": {
				"annotations": {
					"description": "Route for KIE Server's https service."
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-kieserver"
				},
				"name": "${APPLICATION_NAME}-kieserver"
			},
			"spec": {
				"host": "${KIE_SERVER_HOSTNAME_HTTPS}",
				"port": {
					"targetPort": "https"
				},
				"tls": {
					"termination": "passthrough"
				},
				"to": {
					"name": "${APPLICATION_NAME}-kieserver"
				}
			}
		},
		{
			"apiVersion": "v1",
			"id": "${APPLICATION_NAME}-amq-jolokia-console",
			"kind": "Route",
			"metadata": {
				"annotations": {
					"description": "Route for AMQ Jolokia Service"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "amq-jolokia-console"
			},
			"spec": {
				"tls": {
					"termination": "passthrough"
				},
				"to": {
					"kind": "Service",
					"name": "${APPLICATION_NAME}-amq-jolokia"
				}
			}
		},
		{
			"apiVersion": "v1",
			"id": "${APPLICATION_NAME}-amq-tcp-ssl",
			"kind": "Route",
			"metadata": {
				"annotations": {
					"description": "Route for AMQ tcp-ssl Service"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "amq-tcp-ssl-external"
			},
			"spec": {
				"tls": {
					"termination": "passthrough"
				},
				"to": {
					"kind": "Service",
					"name": "${APPLICATION_NAME}-amq-tcp-ssl"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "ImageStream",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-kieserver"
				},
				"name": "${APPLICATION_NAME}-kieserver"
			}
		},
		{
			"apiVersion": "v1",
			"kind": "BuildConfig",
			"metadata": {
				"annotations": {
					"template.alpha.openshift.io/wait-for-ready": "true"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-kieserver",
					"services.server.kie.org/kie-server-id": "${APPLICATION_NAME}-kieserver"
				},
				"name": "${APPLICATION_NAME}-kieserver"
			},
			"spec": {
				"output": {
					"to": {
						"kind": "ImageStreamTag",
						"name": "${APPLICATION_NAME}-kieserver:latest"
					}
				},
				"source": {
					"contextDir": "${CONTEXT_DIR}",
					"git": {
						"ref": "${SOURCE_REPOSITORY_REF}",
						"uri": "${SOURCE_REPOSITORY_URL}"
					},
					"type": "Git"
				},
				"strategy": {
					"sourceStrategy": {
						"env": [
							{
								"name": "KIE_SERVER_CONTAINER_DEPLOYMENT",
								"value": "${KIE_SERVER_CONTAINER_DEPLOYMENT}"
							},
							{
								"name": "MAVEN_MIRROR_URL",
								"value": "${MAVEN_MIRROR_URL}"
							},
							{
								"name": "ARTIFACT_DIR",
								"value": "${ARTIFACT_DIR}"
							}
						],
						"forcePull": true,
						"from": {
							"kind": "ImageStreamTag",
							"name": "${KIE_SERVER_IMAGE_STREAM_NAME}:${IMAGE_STREAM_TAG}",
							"namespace": "${IMAGE_STREAM_NAMESPACE}"
						}
					},
					"type": "Source"
				},
				"triggers": [
					{
						"github": {
							"secret": "${GITHUB_WEBHOOK_SECRET}"
						},
						"type": "GitHub"
					},
					{
						"generic": {
							"secret": "${GENERIC_WEBHOOK_SECRET}"
						},
						"type": "Generic"
					},
					{
						"imageChange": {},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "DeploymentConfig",
			"metadata": {
				"annotations": {
					"template.alpha.openshift.io/wait-for-ready": "true"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-kieserver",
					"services.server.kie.org/kie-server-id": "${APPLICATION_NAME}-kieserver"
				},
				"name": "${APPLICATION_NAME}-kieserver"
			},
			"spec": {
				"replicas": 2,
				"revisionHistoryLimit": 10,
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-kieserver"
				},
				"strategy": {
					"rollingParams": {
						"maxSurge": "100%",
						"maxUnavailable": 0
					},
					"type": "Rolling"
				},
				"template": {
					"metadata": {
						"labels": {
							"application": "${APPLICATION_NAME}",
							"cluster": "jgrp.k8s.${APPLICATION_NAME}.kieserver",
							"deploymentConfig": "${APPLICATION_NAME}-kieserver",
							"service": "${APPLICATION_NAME}-kieserver",
							"services.server.kie.org/kie-server-id": "${APPLICATION_NAME}-kieserver"
						},
						"name": "${APPLICATION_NAME}-kieserver"
					},
					"spec": {
						"containers": [
							{
								"env": [
									{
										"name": "WORKBENCH_SERVICE_NAME",
										"value": "${BUSINESS_CENTRAL_SERVICE}"
									},
									{
										"name": "KIE_ADMIN_USER",
										"valueFrom": {
											"secretKeyRef": {
												"key": "KIE_ADMIN_USER",
												"name": "${CREDENTIALS_SECRET}"
											}
										}
									},
									{
										"name": "KIE_ADMIN_PWD",
										"valueFrom": {
											"secretKeyRef": {
												"key": "KIE_ADMIN_PWD",
												"name": "${CREDENTIALS_SECRET}"
											}
										}
									},
									{
										"name": "KIE_SERVER_MODE",
										"value": "DEVELOPMENT"
									},
									{
										"name": "KIE_MBEANS",
										"value": "${KIE_MBEANS}"
									},
									{
										"name": "DROOLS_SERVER_FILTER_CLASSES",
										"value": "${DROOLS_SERVER_FILTER_CLASSES}"
									},
									{
										"name": "PROMETHEUS_SERVER_EXT_DISABLED",
										"value": "${PROMETHEUS_SERVER_EXT_DISABLED}"
									},
									{
										"name": "KIE_SERVER_BYPASS_AUTH_USER",
										"value": "${KIE_SERVER_BYPASS_AUTH_USER}"
									},
									{
										"name": "KIE_SERVER_ID",
										"valueFrom": {
											"fieldRef": {
												"fieldPath": "metadata.labels['services.server.kie.org/kie-server-id']"
											}
										}
									},
									{
										"name": "KIE_SERVER_ROUTE_NAME",
										"value": "insecure-${APPLICATION_NAME}-kieserver"
									},
									{
										"name": "KIE_SERVER_ROUTER_SERVICE",
										"value": "${APPLICATION_NAME}-smartrouter"
									},
									{
										"name": "KIE_SERVER_CONTAINER_DEPLOYMENT",
										"value": "${KIE_SERVER_CONTAINER_DEPLOYMENT}"
									},
									{
										"name": "MAVEN_REPOS",
										"value": "RHPAMCENTR,EXTERNAL"
									},
									{
										"name": "RHPAMCENTR_MAVEN_REPO_SERVICE",
										"value": "${BUSINESS_CENTRAL_SERVICE}"
									},
									{
										"name": "RHPAMCENTR_MAVEN_REPO_PATH",
										"value": "/maven2/"
									},
									{
										"name": "RHPAMCENTR_MAVEN_REPO_USERNAME",
										"valueFrom": {
											"secretKeyRef": {
												"key": "KIE_ADMIN_USER",
												"name": "${CREDENTIALS_SECRET}"
											}
										}
									},
									{
										"name": "RHPAMCENTR_MAVEN_REPO_PASSWORD",
										"valueFrom": {
											"secretKeyRef": {
												"key": "KIE_ADMIN_PWD",
												"name": "${CREDENTIALS_SECRET}"
											}
										}
									},
									{
										"name": "EXTERNAL_MAVEN_REPO_ID",
										"value": "${MAVEN_REPO_ID}"
									},
									{
										"name": "EXTERNAL_MAVEN_REPO_URL",
										"value": "${MAVEN_REPO_URL}"
									},
									{
										"name": "EXTERNAL_MAVEN_REPO_USERNAME",
										"value": "${MAVEN_REPO_USERNAME}"
									},
									{
										"name": "EXTERNAL_MAVEN_REPO_PASSWORD",
										"value": "${MAVEN_REPO_PASSWORD}"
									},
									{
										"name": "KIE_SERVER_PERSISTENCE_DS",
										"value": "${KIE_SERVER_PERSISTENCE_DS}"
									},
									{
										"name": "DATASOURCES",
										"value": "RHPAM"
									},
									{
										"name": "RHPAM_DATABASE",
										"value": "${KIE_SERVER_POSTGRESQL_DB}"
									},
									{
										"name": "RHPAM_JNDI",
										"value": "${KIE_SERVER_PERSISTENCE_DS}"
									},
									{
										"name": "RHPAM_JTA",
										"value": "true"
									},
									{
										"name": "RHPAM_DRIVER",
										"value": "postgresql"
									},
									{
										"name": "KIE_SERVER_PERSISTENCE_DIALECT",
										"value": "org.hibernate.dialect.PostgreSQLDialect"
									},
									{
										"name": "RHPAM_USERNAME",
										"value": "${KIE_SERVER_POSTGRESQL_USER}"
									},
									{
										"name": "RHPAM_PASSWORD",
										"value": "${KIE_SERVER_POSTGRESQL_PWD}"
									},
									{
										"name": "RHPAM_SERVICE_HOST",
										"value": "${APPLICATION_NAME}-postgresql"
									},
									{
										"name": "RHPAM_SERVICE_PORT",
										"value": "5432"
									},
									{
										"name": "TIMER_SERVICE_DATA_STORE",
										"value": "${APPLICATION_NAME}-postgresql"
									},
									{
										"name": "TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL",
										"value": "${TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL}"
									},
									{
										"name": "KIE_SERVER_EXECUTOR_JMS",
										"value": "${KIE_SERVER_EXECUTOR_JMS}"
									},
									{
										"name": "KIE_SERVER_EXECUTOR_JMS_TRANSACTED",
										"value": "${KIE_SERVER_EXECUTOR_JMS_TRANSACTED}"
									},
									{
										"name": "KIE_SERVER_JMS_QUEUE_REQUEST",
										"value": "${KIE_SERVER_JMS_QUEUE_REQUEST}"
									},
									{
										"name": "KIE_SERVER_JMS_QUEUE_RESPONSE",
										"value": "${KIE_SERVER_JMS_QUEUE_RESPONSE}"
									},
									{
										"name": "KIE_SERVER_JMS_QUEUE_EXECUTOR",
										"value": "${KIE_SERVER_JMS_QUEUE_EXECUTOR}"
									},
									{
										"name": "KIE_SERVER_JMS_ENABLE_SIGNAL",
										"value": "${KIE_SERVER_JMS_ENABLE_SIGNAL}"
									},
									{
										"name": "KIE_SERVER_JMS_QUEUE_SIGNAL",
										"value": "${KIE_SERVER_JMS_QUEUE_SIGNAL}"
									},
									{
										"name": "KIE_SERVER_JMS_ENABLE_AUDIT",
										"value": "${KIE_SERVER_JMS_ENABLE_AUDIT}"
									},
									{
										"name": "KIE_SERVER_JMS_QUEUE_AUDIT",
										"value": "${KIE_SERVER_JMS_QUEUE_AUDIT}"
									},
									{
										"name": "KIE_SERVER_JMS_AUDIT_TRANSACTED",
										"value": "${KIE_SERVER_JMS_AUDIT_TRANSACTED}"
									},
									{
										"name": "MQ_SERVICE_PREFIX_MAPPING",
										"value": "${APPLICATION_NAME}-amq7=AMQ"
									},
									{
										"name": "AMQ_USERNAME",
										"value": "${AMQ_USERNAME}"
									},
									{
										"name": "AMQ_PASSWORD",
										"value": "${AMQ_PASSWORD}"
									},
									{
										"name": "AMQ_PROTOCOL",
										"value": "tcp"
									},
									{
										"name": "AMQ_QUEUES",
										"value": "${AMQ_QUEUES}"
									},
									{
										"name": "HTTPS_KEYSTORE_DIR",
										"value": "/etc/kieserver-secret-volume"
									},
									{
										"name": "HTTPS_KEYSTORE",
										"value": "${KIE_SERVER_HTTPS_KEYSTORE}"
									},
									{
										"name": "HTTPS_NAME",
										"value": "${KIE_SERVER_HTTPS_NAME}"
									},
									{
										"name": "HTTPS_PASSWORD",
										"value": "${KIE_SERVER_HTTPS_PASSWORD}"
									},
									{
										"name": "KIE_SERVER_MGMT_DISABLED",
										"value": "${KIE_SERVER_MGMT_DISABLED}"
									},
									{
										"name": "KIE_SERVER_STARTUP_STRATEGY",
										"value": "OpenShiftStartupStrategy"
									},
									{
										"name": "JGROUPS_PING_PROTOCOL",
										"value": "kubernetes.KUBE_PING"
									},
									{
										"name": "KUBERNETES_NAMESPACE",
										"valueFrom": {
											"fieldRef": {
												"fieldPath": "metadata.namespace"
											}
										}
									},
									{
										"name": "KUBERNETES_LABELS",
										"value": "cluster=jgrp.k8s.${APPLICATION_NAME}.kieserver"
									},
									{
										"name": "SSO_URL",
										"value": "${SSO_URL}"
									},
									{
										"name": "SSO_OPENIDCONNECT_DEPLOYMENTS",
										"value": "ROOT.war"
									},
									{
										"name": "SSO_REALM",
										"value": "${SSO_REALM}"
									},
									{
										"name": "SSO_SECRET",
										"value": "${KIE_SERVER_SSO_SECRET}"
									},
									{
										"name": "SSO_CLIENT",
										"value": "${KIE_SERVER_SSO_CLIENT}"
									},
									{
										"name": "SSO_USERNAME",
										"value": "${SSO_USERNAME}"
									},
									{
										"name": "SSO_PASSWORD",
										"value": "${SSO_PASSWORD}"
									},
									{
										"name": "SSO_DISABLE_SSL_CERTIFICATE_VALIDATION",
										"value": "${SSO_DISABLE_SSL_CERTIFICATE_VALIDATION}"
									},
									{
										"name": "SSO_PRINCIPAL_ATTRIBUTE",
										"value": "${SSO_PRINCIPAL_ATTRIBUTE}"
									},
									{
										"name": "HOSTNAME_HTTP",
										"value": "${KIE_SERVER_HOSTNAME_HTTP}"
									},
									{
										"name": "HOSTNAME_HTTPS",
										"value": "${KIE_SERVER_HOSTNAME_HTTPS}"
									},
									{
										"name": "AUTH_LDAP_URL",
										"value": "${AUTH_LDAP_URL}"
									},
									{
										"name": "AUTH_LDAP_LOGIN_MODULE",
										"value": "${AUTH_LDAP_LOGIN_MODULE}"
									},
									{
										"name": "AUTH_LDAP_LOGIN_FAILOVER",
										"value": "${AUTH_LDAP_LOGIN_FAILOVER}"
									},
									{
										"name": "AUTH_LDAP_BIND_DN",
										"value": "${AUTH_LDAP_BIND_DN}"
									},
									{
										"name": "AUTH_LDAP_BIND_CREDENTIAL",
										"value": "${AUTH_LDAP_BIND_CREDENTIAL}"
									},
									{
										"name": "AUTH_LDAP_ALLOW_EMPTY_PASSWORDS",
										"value": "${AUTH_LDAP_ALLOW_EMPTY_PASSWORDS}"
									},
									{
										"name": "AUTH_LDAP_BASE_CTX_DN",
										"value": "${AUTH_LDAP_BASE_CTX_DN}"
									},
									{
										"name": "AUTH_LDAP_BASE_FILTER",
										"value": "${AUTH_LDAP_BASE_FILTER}"
									},
									{
										"name": "AUTH_LDAP_RECURSIVE_SEARCH",
										"value": "${AUTH_LDAP_RECURSIVE_SEARCH}"
									},
									{
										"name": "AUTH_LDAP_SEARCH_TIME_LIMIT",
										"value": "${AUTH_LDAP_SEARCH_TIME_LIMIT}"
									},
									{
										"name": "AUTH_LDAP_ROLE_ATTRIBUTE_ID",
										"value": "${AUTH_LDAP_ROLE_ATTRIBUTE_ID}"
									},
									{
										"name": "AUTH_LDAP_ROLES_CTX_DN",
										"value": "${AUTH_LDAP_ROLES_CTX_DN}"
									},
									{
										"name": "AUTH_LDAP_ROLE_FILTER",
										"value": "${AUTH_LDAP_ROLE_FILTER}"
									},
									{
										"name": "AUTH_LDAP_ROLE_RECURSION",
										"value": "${AUTH_LDAP_ROLE_RECURSION}"
									},
									{
										"name": "AUTH_LDAP_DEFAULT_ROLE",
										"value": "${AUTH_LDAP_DEFAULT_ROLE}"
									},
									{
										"name": "AUTH_LDAP_NEW_IDENTITY_ATTRIBUTES",
										"value": "${AUTH_LDAP_NEW_IDENTITY_ATTRIBUTES}"
									},
									{
										"name": "AUTH_LDAP_REFERRAL_MODE",
										"value": "${AUTH_LDAP_REFERRAL_MODE}"
									},
									{
										"name": "AUTH_ROLE_MAPPER_ROLES_PROPERTIES",
										"value": "${AUTH_ROLE_MAPPER_ROLES_PROPERTIES}"
									},
									{
										"name": "AUTH_LDAP_MAPPER_KEEP_MAPPED",
										"value": "${AUTH_LDAP_MAPPER_KEEP_MAPPED}"
									},
									{
										"name": "AUTH_LDAP_MAPPER_KEEP_NON_MAPPED",
										"value": "${AUTH_LDAP_MAPPER_KEEP_NON_MAPPED}"
									}
								],
								"image": "${APPLICATION_NAME}-kieserver",
								"imagePullPolicy": "Always",
								"lifecycle": {
									"postStart": {
										"exec": {
											"command": [
												"/bin/sh",
												"/opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh"
											]
										}
									},
									"preStop": {
										"exec": {
											"command": [
												"/bin/sh",
												"/opt/eap/bin/launch/jboss-kie-kieserver-hooks.sh"
											]
										}
									}
								},
								"livenessProbe": {
									"failureThreshold": 3,
									"httpGet": {
										"path": "/services/rest/server/healthcheck",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 180,
									"periodSeconds": 15,
									"timeoutSeconds": 2
								},
								"name": "${APPLICATION_NAME}-kieserver",
								"ports": [
									{
										"containerPort": 8778,
										"name": "jolokia",
										"protocol": "TCP"
									},
									{
										"containerPort": 8080,
										"name": "http",
										"protocol": "TCP"
									},
									{
										"containerPort": 8443,
										"name": "https",
										"protocol": "TCP"
									}
								],
								"readinessProbe": {
									"failureThreshold": 36,
									"httpGet": {
										"path": "/services/rest/server/readycheck",
										"port": 8080,
										"scheme": "HTTP"
									},
									"initialDelaySeconds": 30,
									"periodSeconds": 5,
									"timeoutSeconds": 2
								},
								"resources": {
									"limits": {
										"cpu": "${KIE_SERVER_CPU_LIMIT}",
										"memory": "${KIE_SERVER_MEMORY_LIMIT}"
									},
									"requests": {
										"cpu": "${KIE_SERVER_CPU_REQUEST}",
										"memory": "${KIE_SERVER_MEMORY_REQUEST}"
									}
								},
								"volumeMounts": [
									{
										"mountPath": "/etc/kieserver-secret-volume",
										"name": "kieserver-keystore-volume",
										"readOnly": true
									}
								]
							}
						],
						"serviceAccountName": "${APPLICATION_NAME}-kieserver",
						"terminationGracePeriodSeconds": 90,
						"volumes": [
							{
								"name": "kieserver-keystore-volume",
								"secret": {
									"secretName": "${KIE_SERVER_HTTPS_SECRET}"
								}
							}
						]
					}
				},
				"triggers": [
					{
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"${APPLICATION_NAME}-kieserver"
							],
							"from": {
								"kind": "ImageStream",
								"name": "${APPLICATION_NAME}-kieserver"
							}
						},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "DeploymentConfig",
			"metadata": {
				"annotations": {
					"template.alpha.openshift.io/wait-for-ready": "true"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-postgresql"
				},
				"name": "${APPLICATION_NAME}-postgresql"
			},
			"spec": {
				"replicas": 1,
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-postgresql"
				},
				"strategy": {
					"type": "Recreate"
				},
				"template": {
					"metadata": {
						"labels": {
							"application": "${APPLICATION_NAME}",
							"deploymentConfig": "${APPLICATION_NAME}-postgresql",
							"service": "${APPLICATION_NAME}-postgresql"
						},
						"name": "${APPLICATION_NAME}-postgresql"
					},
					"spec": {
						"containers": [
							{
								"env": [
									{
										"name": "POSTGRESQL_USER",
										"value": "${KIE_SERVER_POSTGRESQL_USER}"
									},
									{
										"name": "POSTGRESQL_PASSWORD",
										"value": "${KIE_SERVER_POSTGRESQL_PWD}"
									},
									{
										"name": "POSTGRESQL_DATABASE",
										"value": "${KIE_SERVER_POSTGRESQL_DB}"
									},
									{
										"name": "POSTGRESQL_MAX_PREPARED_TRANSACTIONS",
										"value": "${POSTGRESQL_MAX_PREPARED_TRANSACTIONS}"
									}
								],
								"image": "postgresql",
								"imagePullPolicy": "Always",
								"livenessProbe": {
									"exec": {
										"command": [
											"/usr/libexec/check-container",
											"--live"
										]
									},
									"initialDelaySeconds": 120,
									"timeoutSeconds": 10
								},
								"name": "${APPLICATION_NAME}-postgresql",
								"ports": [
									{
										"containerPort": 5432,
										"protocol": "TCP"
									}
								],
								"readinessProbe": {
									"exec": {
										"command": [
											"/usr/libexec/check-container"
										]
									},
									"initialDelaySeconds": 5,
									"timeoutSeconds": 1
								},
								"volumeMounts": [
									{
										"mountPath": "/var/lib/pgsql/data",
										"name": "${APPLICATION_NAME}-postgresql-pvol"
									}
								]
							}
						],
						"terminationGracePeriodSeconds": 60,
						"volumes": [
							{
								"name": "${APPLICATION_NAME}-postgresql-pvol",
								"persistentVolumeClaim": {
									"claimName": "${APPLICATION_NAME}-postgresql-claim"
								}
							}
						]
					}
				},
				"triggers": [
					{
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"${APPLICATION_NAME}-postgresql"
							],
							"from": {
								"kind": "ImageStreamTag",
								"name": "postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}",
								"namespace": "${POSTGRESQL_IMAGE_STREAM_NAMESPACE}"
							}
						},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "DeploymentConfig",
			"metadata": {
				"annotations": {
					"template.alpha.openshift.io/wait-for-ready": "true"
				},
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-amq"
				},
				"name": "${APPLICATION_NAME}-amq"
			},
			"spec": {
				"replicas": 1,
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-amq"
				},
				"strategy": {
					"rollingParams": {
						"maxSurge": "100%",
						"maxUnavailable": 0
					},
					"type": "Rolling"
				},
				"template": {
					"metadata": {
						"labels": {
							"application": "${APPLICATION_NAME}",
							"deploymentConfig": "${APPLICATION_NAME}-amq",
							"service": "${APPLICATION_NAME}-amq"
						},
						"name": "${APPLICATION_NAME}-amq"
					},
					"spec": {
						"containers": [
							{
								"env": [
									{
										"name": "AMQ_USER",
										"value": "${AMQ_USERNAME}"
									},
									{
										"name": "AMQ_PASSWORD",
										"value": "${AMQ_PASSWORD}"
									},
									{
										"name": "AMQ_ROLE",
										"value": "${AMQ_ROLE}"
									},
									{
										"name": "AMQ_NAME",
										"value": "${APPLICATION_NAME}-broker"
									},
									{
										"name": "AMQ_TRANSPORTS",
										"value": "${AMQ_PROTOCOL}"
									},
									{
										"name": "AMQ_QUEUES",
										"value": "${AMQ_QUEUES}"
									},
									{
										"name": "AMQ_GLOBAL_MAX_SIZE",
										"value": "${AMQ_GLOBAL_MAX_SIZE}"
									},
									{
										"name": "AMQ_REQUIRE_LOGIN",
										"value": "true"
									},
									{
										"name": "AMQ_ANYCAST_PREFIX"
									},
									{
										"name": "AMQ_MULTICAST_PREFIX"
									},
									{
										"name": "AMQ_KEYSTORE_TRUSTSTORE_DIR",
										"value": "/etc/amq-secret-volume"
									},
									{
										"name": "AMQ_TRUSTSTORE",
										"value": "${AMQ_TRUSTSTORE}"
									},
									{
										"name": "AMQ_TRUSTSTORE_PASSWORD",
										"value": "${AMQ_TRUSTSTORE_PASSWORD}"
									},
									{
										"name": "AMQ_KEYSTORE",
										"value": "${AMQ_KEYSTORE}"
									},
									{
										"name": "AMQ_KEYSTORE_PASSWORD",
										"value": "${AMQ_KEYSTORE_PASSWORD}"
									}
								],
								"image": "${AMQ_BROKER_IMAGESTREAM_NAME}",
								"imagePullPolicy": "Always",
								"name": "${APPLICATION_NAME}-amq",
								"ports": [
									{
										"containerPort": 8161,
										"name": "console-jolokia",
										"protocol": "TCP"
									},
									{
										"containerPort": 5672,
										"name": "amqp",
										"protocol": "TCP"
									},
									{
										"containerPort": 5671,
										"name": "amqp-ssl",
										"protocol": "TCP"
									},
									{
										"containerPort": 1883,
										"name": "mqtt",
										"protocol": "TCP"
									},
									{
										"containerPort": 8883,
										"name": "mqtt-ssl",
										"protocol": "TCP"
									},
									{
										"containerPort": 61613,
										"name": "stomp",
										"protocol": "TCP"
									},
									{
										"containerPort": 61612,
										"name": "stomp-ssl",
										"protocol": "TCP"
									},
									{
										"containerPort": 61616,
										"name": "artemis",
										"protocol": "TCP"
									},
									{
										"containerPort": 61617,
										"name": "amq-tcp-ssl",
										"protocol": "TCP"
									}
								],
								"readinessProbe": {
									"exec": {
										"command": [
											"/bin/bash",
											"-c",
											"/opt/amq/bin/readinessProbe.sh"
										]
									}
								},
								"volumeMounts": [
									{
										"mountPath": "/etc/amq-secret-volume",
										"name": "broker-secret-volume",
										"readOnly": true
									}
								]
							}
						],
						"terminationGracePeriodSeconds": 60,
						"volumes": [
							{
								"name": "broker-secret-volume",
								"secret": {
									"secretName": "${AMQ_SECRET}"
								}
							}
						]
					}
				},
				"triggers": [
					{
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"${APPLICATION_NAME}-amq"
							],
							"from": {
								"kind": "ImageStreamTag",
								"name": "${AMQ_BROKER_IMAGESTREAM_NAME}",
								"namespace": "${AMQ_IMAGE_STREAM_NAMESPACE}"
							}
						},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "PersistentVolumeClaim",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}",
					"service": "${APPLICATION_NAME}-postgresql"
				},
				"name": "${APPLICATION_NAME}-postgresql-claim"
			},
			"spec": {
				"accessModes": [
					"ReadWriteOnce"
				],
				"resources": {
					"requests": {
						"storage": "${DB_VOLUME_CAPACITY}"
					}
				}
			}
		}
	],
	"parameters": [
		{
			"name": "APPLICATION_NAME",
			"displayName": "Application Name",
			"description": "The name for the application.",
			"value": "myapp",
			"required": true
		},
		{
			"name": "CREDENTIALS_SECRET",
			"displayName": "Credentials secret",
			"description": "Secret containing the KIE_ADMIN_USER and KIE_ADMIN_PWD values",
			"required": true
		},
		{
			"name": "IMAGE_STREAM_NAMESPACE",
			"displayName": "ImageStream Namespace",
			"description": "Namespace in which the ImageStreams for Red Hat Process Automation Manager images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is \"openshift\".",
			"value": "openshift",
			"required": true
		},
		{
			"name": "KIE_SERVER_IMAGE_STREAM_NAME",
			"displayName": "KIE Server ImageStream Name",
			"description": "The name of the image stream to use for KIE Server. Default is \"rhpam-kieserver-rhel8\".",
			"value": "rhpam-kieserver-rhel8",
			"required": true
		},
		{
			"name": "IMAGE_STREAM_TAG",
			"displayName": "ImageStream Tag",
			"description": "A named pointer to an image in an image stream. Default is \"7.13.0\".",
			"value": "7.13.0",
			"required": true
		},
		{
			"name": "KIE_SERVER_PERSISTENCE_DS",
			"displayName": "KIE Server Persistence DS",
			"description": "KIE Server persistence datasource (Sets the org.kie.server.persistence.ds system property)",
			"value": "java:/jboss/datasources/rhpam"
		},
		{
			"name": "POSTGRESQL_IMAGE_STREAM_NAMESPACE",
			"displayName": "PostgreSQL ImageStream Namespace",
			"description": "Namespace in which the ImageStream for the PostgreSQL image is installed. The ImageStream is already installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is \"openshift\".",
			"value": "openshift"
		},
		{
			"name": "POSTGRESQL_IMAGE_STREAM_TAG",
			"displayName": "PostgreSQL ImageStream Tag",
			"description": "The PostgreSQL image version, which is intended to correspond to the PostgreSQL version. Default is \"10\".",
			"value": "10"
		},
		{
			"name": "KIE_SERVER_POSTGRESQL_USER",
			"displayName": "KIE Server PostgreSQL Database User",
			"description": "KIE Server PostgreSQL database user name",
			"value": "rhpam"
		},
		{
			"name": "KIE_SERVER_POSTGRESQL_PWD",
			"displayName": "KIE Server PostgreSQL Database Password",
			"description": "KIE Server PostgreSQL database password",
			"generate": "expression",
			"from": "[a-zA-Z]{6}[0-9]{1}!"
		},
		{
			"name": "KIE_SERVER_POSTGRESQL_DB",
			"displayName": "KIE Server PostgreSQL Database Name",
			"description": "KIE Server PostgreSQL database name",
			"value": "rhpam7"
		},
		{
			"name": "POSTGRESQL_MAX_PREPARED_TRANSACTIONS",
			"displayName": "PostgreSQL Database max prepared connections",
			"description": "Allows the PostgreSQL to handle XA transactions.",
			"value": "100",
			"required": true
		},
		{
			"name": "DB_VOLUME_CAPACITY",
			"displayName": "Database Volume Capacity",
			"description": "Size of persistent storage for the database volume.",
			"value": "1Gi",
			"required": true
		},
		{
			"name": "KIE_MBEANS",
			"displayName": "KIE MBeans",
			"description": "KIE Server mbeans enabled/disabled (Sets the kie.mbeans and kie.scanner.mbeans system properties)",
			"value": "enabled"
		},
		{
			"name": "DROOLS_SERVER_FILTER_CLASSES",
			"displayName": "Drools Server Filter Classes",
			"description": "KIE Server class filtering (Sets the org.drools.server.filter.classes system property)",
			"value": "true"
		},
		{
			"name": "PROMETHEUS_SERVER_EXT_DISABLED",
			"displayName": "Prometheus Server Extension Disabled",
			"description": "If set to false, the prometheus server extension will be enabled. (Sets the org.kie.prometheus.server.ext.disabled system property)"
		},
		{
			"name": "KIE_SERVER_HOSTNAME_HTTP",
			"displayName": "KIE Server Custom http Route Hostname",
			"description": "Custom hostname for http service route. Leave blank for default hostname, e.g.: insecure-\u003capplication-name\u003e-kieserver-\u003cproject\u003e.\u003cdefault-domain-suffix\u003e"
		},
		{
			"name": "KIE_SERVER_HOSTNAME_HTTPS",
			"displayName": "KIE Server Custom https Route Hostname",
			"description": "Custom hostname for https service route.  Leave blank for default hostname, e.g.: \u003capplication-name\u003e-kieserver-\u003cproject\u003e.\u003cdefault-domain-suffix\u003e"
		},
		{
			"name": "KIE_SERVER_HTTPS_SECRET",
			"displayName": "KIE Server Keystore Secret Name",
			"description": "The name of the secret containing the keystore file",
			"required": true
		},
		{
			"name": "KIE_SERVER_HTTPS_KEYSTORE",
			"displayName": "KIE Server Keystore Filename",
			"description": "The name of the keystore file within the secret",
			"value": "keystore.jks"
		},
		{
			"name": "KIE_SERVER_HTTPS_NAME",
			"displayName": "KIE Server Certificate Name",
			"description": "The name associated with the server certificate",
			"value": "jboss"
		},
		{
			"name": "KIE_SERVER_HTTPS_PASSWORD",
			"displayName": "KIE Server Keystore Password",
			"description": "The password for the keystore and certificate",
			"value": "mykeystorepass"
		},
		{
			"name": "KIE_SERVER_BYPASS_AUTH_USER",
			"displayName": "KIE Server Bypass Auth User",
			"description": "Allows the KIE Server to bypass the authenticated user for task-related operations, for example, queries. (Sets the org.kie.server.bypass.auth.user system property)",
			"value": "false"
		},
		{
			"name": "KIE_SERVER_CONTAINER_DEPLOYMENT",
			"displayName": "KIE Server Container Deployment",
			"description": "KIE Server Container deployment configuration with optional alias. Format: containerId=groupId:artifactId:version|c2(alias2)=g2:a2:v2",
			"required": true
		},
		{
			"name": "SOURCE_REPOSITORY_URL",
			"displayName": "Git Repository URL",
			"description": "Git source URI for application",
			"required": true
		},
		{
			"name": "SOURCE_REPOSITORY_REF",
			"displayName": "Git Reference",
			"description": "Git branch/tag reference"
		},
		{
			"name": "CONTEXT_DIR",
			"displayName": "Context Directory",
			"description": "Path within Git project to build; empty for root project directory."
		},
		{
			"name": "GITHUB_WEBHOOK_SECRET",
			"displayName": "Github Webhook Secret",
			"description": "GitHub trigger secret",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}",
			"required": true
		},
		{
			"name": "GENERIC_WEBHOOK_SECRET",
			"displayName": "Generic Webhook Secret",
			"description": "Generic build trigger secret",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}",
			"required": true
		},
		{
			"name": "MAVEN_MIRROR_URL",
			"displayName": "Maven mirror URL",
			"description": "Maven mirror to use for S2I builds"
		},
		{
			"name": "MAVEN_REPO_ID",
			"displayName": "Maven repository ID",
			"description": "The id to use for the maven repository, if set. Default is generated randomly."
		},
		{
			"name": "MAVEN_REPO_URL",
			"displayName": "Maven repository URL",
			"description": "Fully qualified URL to a Maven repository."
		},
		{
			"name": "MAVEN_REPO_USERNAME",
			"displayName": "Maven repository user name",
			"description": "User name for accessing the Maven repository, if required."
		},
		{
			"name": "MAVEN_REPO_PASSWORD",
			"displayName": "Maven repository password",
			"description": "Password to access the Maven repository, if required."
		},
		{
			"name": "BUSINESS_CENTRAL_SERVICE",
			"displayName": "Name of the Business Central service",
			"description": "The Service name for the optional Business Central, where it can be reached, to allow service lookups (for example,  maven repo usage), if required."
		},
		{
			"name": "ARTIFACT_DIR",
			"displayName": "List of directories from which archives will be copied into the deployment folder",
			"description": "List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied."
		},
		{
			"name": "TIMER_SERVICE_DATA_STORE_REFRESH_INTERVAL",
			"displayName": "Timer service data store refresh interval (in milliseconds)",
			"description": "Sets refresh-interval for the EJB timer service database-data-store.",
			"value": "30000"
		},
		{
			"name": "KIE_SERVER_MEMORY_LIMIT",
			"displayName": "KIE Server Container Memory Limit",
			"description": "KIE Server Container memory limit.",
			"value": "2Gi",
			"required": true
		},
		{
			"name": "KIE_SERVER_MEMORY_REQUEST",
			"displayName": "KIE Server Container Memory Request",
			"description": "KIE Server Container memory request.",
			"value": "1536Mi",
			"required": true
		},
		{
			"name": "KIE_SERVER_CPU_LIMIT",
			"displayName": "KIE Server Container CPU Limit",
			"description": "KIE Server Container CPU limit.",
			"value": "1",
			"required": true
		},
		{
			"name": "KIE_SERVER_CPU_REQUEST",
			"displayName": "KIE Server Container CPU Request",
			"description": "KIE Server Container CPU request.",
			"value": "750m",
			"required": true
		},
		{
			"name": "KIE_SERVER_MGMT_DISABLED",
			"displayName": "Disable KIE Server Management",
			"description": "Disable management api and don't allow KIE containers to be deployed/undeployed or started/stopped. (Sets the property org.kie.server.mgmt.api.disabled to true)",
			"value": "true",
			"required": true
		},
		{
			"name": "KIE_SERVER_EXECUTOR_JMS",
			"displayName": "KIE Server JMS Executor",
			"description": "Enables the JMS executor, set false to disable it.",
			"value": "true"
		},
		{
			"name": "KIE_SERVER_EXECUTOR_JMS_TRANSACTED",
			"displayName": "KIE Server Transacted Executor",
			"description": "Enable transactions for JMS executor, disabled by default",
			"value": "false"
		},
		{
			"name": "KIE_SERVER_JMS_QUEUE_REQUEST",
			"displayName": "KIE Server JMS Request Queue",
			"description": "JNDI name of request queue for JMS. The default value is queue/KIE.SERVER.REQUEST"
		},
		{
			"name": "KIE_SERVER_JMS_QUEUE_RESPONSE",
			"displayName": "KIE Server JMS Response Queue",
			"description": "JNDI name of response queue for JMS. The default value is queue/KIE.SERVER.RESPONSE"
		},
		{
			"name": "KIE_SERVER_JMS_QUEUE_EXECUTOR",
			"displayName": "KIE Server JMS Executor Queue",
			"description": "JNDI name of response queue for JMS. The default value is queue/KIE.SERVER.RESPONSE"
		},
		{
			"name": "KIE_SERVER_JMS_ENABLE_SIGNAL",
			"displayName": "Enable KIE Server JMS Signal Queue",
			"description": "Enable the Signal configuration through JMS",
			"value": "true"
		},
		{
			"name": "KIE_SERVER_JMS_QUEUE_SIGNAL",
			"displayName": "KIE Server JMS Signal Queue",
			"description": "JMS queue for signals"
		},
		{
			"name": "KIE_SERVER_JMS_ENABLE_AUDIT",
			"displayName": "Enable KIE Server JMS Audit",
			"description": "Enable the Audit logging through JMS",
			"value": "true"
		},
		{
			"name": "KIE_SERVER_JMS_QUEUE_AUDIT",
			"displayName": "KIE Server JMS Audit Queue",
			"description": "JMS queue for audit logging"
		},
		{
			"name": "KIE_SERVER_JMS_AUDIT_TRANSACTED",
			"displayName": "KIE Server JMS Audit logger transacted",
			"description": "determines if JMS session is transacted or not - default true."
		},
		{
			"name": "AMQ_USERNAME",
			"displayName": "AMQ Username",
			"description": "User name for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.",
			"generate": "expression",
			"from": "user[a-zA-Z0-9]{3}"
		},
		{
			"name": "AMQ_PASSWORD",
			"displayName": "AMQ Password",
			"description": "Password for standard broker user. It is required for connecting to the broker. If left empty, it will be generated.",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}"
		},
		{
			"name": "AMQ_ROLE",
			"displayName": "AMQ Role",
			"description": "User role for standard broker user.",
			"value": "admin",
			"required": true
		},
		{
			"name": "AMQ_QUEUES",
			"displayName": "AMQ Queues",
			"description": "Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. These are the default queues needed by KIE Server. If using custom Queues, use the same values here as in the KIE_SERVER_JMS_QUEUE_RESPONSE, KIE_SERVER_JMS_QUEUE_REQUEST, KIE_SERVER_JMS_QUEUE_SIGNAL, KIE_SERVER_JMS_QUEUE_AUDIT  and KIE_SERVER_JMS_QUEUE_EXECUTOR parameters.",
			"value": "queue/KIE.SERVER.REQUEST,queue/KIE.SERVER.RESPONSE,queue/KIE.SERVER.EXECUTOR,queue/KIE.SERVER.SIGNAL,queue/KIE.SERVER.AUDIT"
		},
		{
			"name": "AMQ_GLOBAL_MAX_SIZE",
			"displayName": "AMQ Global Max Size",
			"description": "Specifies the maximum amount of memory that message data can consume. If no value is specified, half of the system’s memory is allocated."
		},
		{
			"name": "AMQ_SECRET",
			"displayName": "AMQ Secret Name",
			"description": "The name of a secret containing AMQ SSL related files.",
			"required": true
		},
		{
			"name": "AMQ_TRUSTSTORE",
			"displayName": "AMQ TRUSTSTORE",
			"description": "The name of the AMQ SSL Trust Store file."
		},
		{
			"name": "AMQ_TRUSTSTORE_PASSWORD",
			"displayName": "AMQ TRUSTSTORE PASSWORD",
			"description": "The password for the AMQ Trust Store."
		},
		{
			"name": "AMQ_KEYSTORE",
			"displayName": "AMQ KEYSTORE",
			"description": "The name of the AMQ keystore file."
		},
		{
			"name": "AMQ_KEYSTORE_PASSWORD",
			"displayName": "AMQ KEYSTORE PASSWORD",
			"description": "The password for the AMQ keystore and certificate."
		},
		{
			"name": "AMQ_PROTOCOL",
			"displayName": "AMQ Protocols",
			"description": "Broker protocols to configure, separated by commas. Allowed values are: `openwire`, `amqp`, `stomp` and `mqtt`. Only `openwire` is supported by EAP.",
			"value": "openwire"
		},
		{
			"name": "AMQ_BROKER_IMAGESTREAM_NAME",
			"displayName": "AMQ Broker Image",
			"description": "AMQ Broker Image",
			"value": "amq-broker:7.9",
			"required": true
		},
		{
			"name": "AMQ_IMAGE_STREAM_NAMESPACE",
			"displayName": "AMQ ImageStream Namespace",
			"description": "Namespace in which the ImageStreams for Red Hat AMQ images are installed. These ImageStreams are normally installed in the openshift namespace. You need to modify this parameter only if you installed the ImageStream in a different namespace/project. Default is \"openshift\".",
			"value": "openshift",
			"required": true
		},
		{
			"name": "SSO_URL",
			"displayName": "RH-SSO URL",
			"description": "RH-SSO URL"
		},
		{
			"name": "SSO_REALM",
			"displayName": "RH-SSO Realm name",
			"description": "RH-SSO Realm name"
		},
		{
			"name": "KIE_SERVER_SSO_CLIENT",
			"displayName": "KIE Server RH-SSO Client name",
			"description": "KIE Server RH-SSO Client name"
		},
		{
			"name": "KIE_SERVER_SSO_SECRET",
			"displayName": "KIE Server RH-SSO Client Secret",
			"description": "KIE Server RH-SSO Client Secret"
		},
		{
			"name": "SSO_USERNAME",
			"displayName": "RH-SSO Realm admin user name",
			"description": "RH-SSO Realm admin user name for creating the Client if it doesn't exist"
		},
		{
			"name": "SSO_PASSWORD",
			"displayName": "RH-SSO Realm Admin Password",
			"description": "RH-SSO Realm Admin Password used to create the Client"
		},
		{
			"name": "SSO_DISABLE_SSL_CERTIFICATE_VALIDATION",
			"displayName": "RH-SSO Disable SSL Certificate Validation",
			"description": "RH-SSO Disable SSL Certificate Validation",
			"value": "false"
		},
		{
			"name": "SSO_PRINCIPAL_ATTRIBUTE",
			"displayName": "RH-SSO Principal Attribute",
			"description": "RH-SSO Principal Attribute to use as user name.",
			"value": "preferred_username"
		},
		{
			"name": "AUTH_LDAP_URL",
			"displayName": "LDAP Endpoint",
			"description": "LDAP endpoint to connect for authentication. For failover, set two or more LDAP endpoints separated by space."
		},
		{
			"name": "AUTH_LDAP_LOGIN_MODULE",
			"displayName": "LDAP Flag Login Module",
			"description": "LDAP login module flag, adds backward compatibility with the legacy security subsystem on Elytron. 'optional' is the only supported value, if set, it will create a distributed realm on Elytron configuration with LDAP and FileSystem realms with the user added using the KIE_ADMIN_USER."
		},
		{
			"name": "AUTH_LDAP_LOGIN_FAILOVER",
			"displayName": "LDAP login failover",
			"description": "Enable failover, if LDAP Url is unreachable, it will fail over to the KieFsRealm."
		},
		{
			"name": "AUTH_LDAP_BIND_DN",
			"displayName": "LDAP Bind DN",
			"description": "Bind DN used for authentication"
		},
		{
			"name": "AUTH_LDAP_BIND_CREDENTIAL",
			"displayName": "LDAP Bind Credentials",
			"description": "LDAP Credentials used for authentication"
		},
		{
			"name": "AUTH_LDAP_ALLOW_EMPTY_PASSWORDS",
			"displayName": "Allow Empty Passwords",
			"description": "Does this realm support blank password direct verification? Blank password attempt will be rejected otherwise. Boolean flag, defaults to false."
		},
		{
			"name": "AUTH_LDAP_BASE_CTX_DN",
			"displayName": "LDAP Base DN",
			"description": "LDAP Base DN of the top-level context to begin the user search."
		},
		{
			"name": "AUTH_LDAP_BASE_FILTER",
			"displayName": "LDAP Base Search filter",
			"description": "LDAP search filter used to locate the context of the user to authenticate. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. A common example for the search filter is (uid={0})."
		},
		{
			"name": "AUTH_LDAP_RECURSIVE_SEARCH",
			"displayName": "LDAP User resursive search",
			"description": "Indicates if the user queries are recursive."
		},
		{
			"name": "AUTH_LDAP_SEARCH_TIME_LIMIT",
			"displayName": "LDAP Search time limit",
			"description": "The timeout in milliseconds for user or role searches."
		},
		{
			"name": "AUTH_LDAP_ROLE_ATTRIBUTE_ID",
			"displayName": "LDAP Role attributeID",
			"description": "Name of the attribute containing the user roles."
		},
		{
			"name": "AUTH_LDAP_ROLES_CTX_DN",
			"displayName": "LDAP Roles Search DN",
			"description": "The fixed DN of the context to search for user roles. This is not the DN where the actual roles are, but the DN where the objects containing the user roles are. For example, in a Microsoft Active Directory server, this is the DN where the user account is."
		},
		{
			"name": "AUTH_LDAP_ROLE_FILTER",
			"displayName": "LDAP Role search filter",
			"description": "A search filter used to locate the roles associated with the authenticated user. The input username or userDN obtained from the login module callback is substituted into the filter anywhere a {0} expression is used. The authenticated userDN is substituted into the filter anywhere a {1} is used. An example search filter that matches on the input username is (member={0}). An alternative that matches on the authenticated userDN is (member={1})."
		},
		{
			"name": "AUTH_LDAP_ROLE_RECURSION",
			"displayName": "LDAP Role recursion",
			"description": "The number of levels of recursion the role search will go below a matching context. Disable recursion by setting this to 0."
		},
		{
			"name": "AUTH_LDAP_DEFAULT_ROLE",
			"displayName": "LDAP Default role",
			"description": "A role included for all authenticated users"
		},
		{
			"name": "AUTH_LDAP_NEW_IDENTITY_ATTRIBUTES",
			"displayName": "LDAP new identity attributes",
			"description": "Provide new identities for LDAP  identity mapping, the pattern to be used with this env is 'attribute_name=attribute_value;another_attribute_name=value'"
		},
		{
			"name": "AUTH_LDAP_REFERRAL_MODE",
			"displayName": "LDAP follow referrals",
			"description": "If LDAP referrals should be followed. Corresponds to REFERRAL ('java.naming.referral') environment property. Allowed values: 'ignore', 'follow', 'throw'"
		},
		{
			"name": "AUTH_ROLE_MAPPER_ROLES_PROPERTIES",
			"displayName": "Role Mapping roles properties file path or one lined roles",
			"description": "When present, the RoleMapping will be configured to use the provided properties file or roles. This parameter defines the fully-qualified file path and name of a properties file or a set of roles with the following pattern 'role=role1;another-role=role2'. The format of every entry in the file is original_role=role1,role2,role3"
		},
		{
			"name": "AUTH_LDAP_MAPPER_KEEP_MAPPED",
			"displayName": "Role Mapper Keep Mapped",
			"description": "When set to 'true' the mapped roles will retain all roles, that have defined mappings."
		},
		{
			"name": "AUTH_LDAP_MAPPER_KEEP_NON_MAPPED",
			"displayName": "Role Mapper Keep Non Mapped",
			"description": "When set to 'true' the mapped roles will retain all roles, that have no defined mappings."
		}
	],
	"labels": {
		"rhpam": "7.13",
		"template": "rhpam713-prod-immutable-kieserver-amq"
	}
}