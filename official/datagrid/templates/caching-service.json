{
    "apiVersion": "v1",
    "kind": "Template",
    "labels": {
        "template": "caching-service"
    },
    "metadata": {
        "annotations": {
            "description": "Red Hat Data Grid is a high performance, linearly scalable, key/value data grid solution. It provides many features to serve a variety of use cases.",
            "iconClass": "icon-datagrid",
            "openshift.io/display-name": "Red Hat Cache Service",
            "openshift.io/documentation-url": "https://github.com/jboss-container-images/datagrid-7-image/blob/datagrid-services-dev/documentation/cache-service.asciidoc",
            "openshift.io/long-description": "In this service, Red Hat Data Grid is configured as an in-memory caching service without persistence. Data in the cache will be lost if the service is stopped or restarted, and therefore, it should not be used as a permanent store for data.\nIt can be used to improve your application\u2019s response time, by keeping frequently and recently accessed data in a high speed in-memory store.",
            "openshift.io/provider-display-name": "Red Hat, Inc.",
            "openshift.io/support-url": "https://www.redhat.com/en/services/support",
            "tags": "database,datagrid"
        },
        "name": "caching-service"
    },
    "objects": [
        {
            "apiVersion": "v1",
            "kind": "Secret",
            "metadata": {
                "name": "${APPLICATION_NAME}"
            },
            "stringData": {
                "application-password": "${APPLICATION_USER_PASSWORD}",
                "application-user": "${APPLICATION_USER}"
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Headless service for StatefulSets",
                    "service.alpha.openshift.io/serving-cert-secret-name": "service-certs"
                },
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "name": "${APPLICATION_NAME}-headless"
            },
            "spec": {
                "clusterIP": "None",
                "ports": [
                    {
                        "name": "http",
                        "port": 8080,
                        "targetPort": 8080
                    },
                    {
                        "name": "hotrod",
                        "port": 11222,
                        "targetPort": 11222
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "The JGroups ping port for clustering.",
                    "service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
                },
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "name": "${APPLICATION_NAME}-ping"
            },
            "spec": {
                "clusterIP": "None",
                "ports": [
                    {
                        "name": "ping",
                        "port": 8888
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "The web server's HTTP port."
                },
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "name": "${APPLICATION_NAME}-http"
            },
            "spec": {
                "ports": [
                    {
                        "port": 8080,
                        "targetPort": 8080
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            }
        },
        {
            "apiVersion": "v1",
            "kind": "Service",
            "metadata": {
                "annotations": {
                    "description": "Hot Rod's port."
                },
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "name": "${APPLICATION_NAME}-hotrod"
            },
            "spec": {
                "ports": [
                    {
                        "port": 11222,
                        "targetPort": 11222
                    }
                ],
                "selector": {
                    "deploymentConfig": "${APPLICATION_NAME}"
                }
            }
        },
        {
            "apiVersion": "apps/v1beta1",
            "kind": "StatefulSet",
            "metadata": {
                "labels": {
                    "application": "${APPLICATION_NAME}"
                },
                "name": "${APPLICATION_NAME}"
            },
            "spec": {
                "replicas": "${{NUMBER_OF_INSTANCES}}",
                "serviceName": "${APPLICATION_NAME}-headless",
                "strategy": {
                    "rollingParams": {
                        "intervalSeconds": 20,
                        "maxSurge": 1,
                        "maxUnavailable": 1,
                        "timeoutSeconds": 1200,
                        "updatePeriodSeconds": 20
                    },
                    "type": "Rolling"
                },
                "template": {
                    "metadata": {
                        "labels": {
                            "application": "${APPLICATION_NAME}",
                            "deploymentConfig": "${APPLICATION_NAME}"
                        },
                        "name": "${APPLICATION_NAME}"
                    },
                    "spec": {
                        "containers": [
                            {
                                "env": [
                                    {
                                        "name": "PROFILE",
                                        "value": "CACHING-SERVICE"
                                    },
                                    {
                                        "name": "OPENSHIFT_DNS_PING_SERVICE_NAME",
                                        "value": "${APPLICATION_NAME}-ping"
                                    },
                                    {
                                        "name": "OPENSHIFT_DNS_PING_SERVICE_PORT",
                                        "value": "8888"
                                    },
                                    {
                                        "name": "KEYSTORE_FILE",
                                        "value": "/var/run/secrets/java.io/keystores/${APPLICATION_NAME}.p12"
                                    },
                                    {
                                        "name": "KEYSTORE_PASSWORD",
                                        "value": "${APPLICATION_NAME}"
                                    },
                                    {
                                        "name": "APPLICATION_USER",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "application-user",
                                                "name": "${APPLICATION_NAME}"
                                            }
                                        }
                                    },
                                    {
                                        "name": "APPLICATION_USER_PASSWORD",
                                        "valueFrom": {
                                            "secretKeyRef": {
                                                "key": "application-password",
                                                "name": "${APPLICATION_NAME}"
                                            }
                                        }
                                    }
                                ],
                                "image": "${IMAGE}",
                                "livenessProbe": {
                                    "exec": {
                                        "command": [
                                            "/opt/datagrid/bin/livenessProbe.sh"
                                        ]
                                    },
                                    "failureThreshold": 5,
                                    "initialDelaySeconds": 15,
                                    "periodSeconds": 20,
                                    "successThreshold": 1,
                                    "timeoutSeconds": 10
                                },
                                "name": "${APPLICATION_NAME}",
                                "ports": [
                                    {
                                        "containerPort": 8080,
                                        "name": "http",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 8888,
                                        "name": "ping",
                                        "protocol": "TCP"
                                    },
                                    {
                                        "containerPort": 11222,
                                        "name": "hotrod",
                                        "protocol": "TCP"
                                    }
                                ],
                                "readinessProbe": {
                                    "exec": {
                                        "command": [
                                            "/opt/datagrid/bin/readinessProbe.sh"
                                        ]
                                    },
                                    "failureThreshold": 5,
                                    "initialDelaySeconds": 17,
                                    "periodSeconds": 20,
                                    "successThreshold": 2,
                                    "timeoutSeconds": 10
                                },
                                "resources": {
                                    "limits": {
                                        "memory": "${TOTAL_CONTAINER_MEM}Mi"
                                    },
                                    "requests": {
                                        "cpu": "0.5",
                                        "memory": "${TOTAL_CONTAINER_MEM}Mi"
                                    }
                                },
                                "volumeMounts": [
                                    {
                                        "mountPath": "/opt/jboss/infinispan-server/standalone/data",
                                        "name": "srv-data"
                                    },
                                    {
                                        "mountPath": "/var/run/secrets/java.io/keystores",
                                        "name": "srv-data"
                                    }
                                ]
                            }
                        ],
                        "initContainers": [
                            {
                                "args": [
                                    "-c",
                                    "rm -f $KEYSTORE_FILE $KEYSTORE_PKCS12 && openssl pkcs12 -export -inkey $TLS_KEY_FILE -in $CRT_FILE -out $KEYSTORE_PKCS12 -password pass:$KEYSTORE_PASSWORD && keytool -importkeystore -noprompt -srckeystore $KEYSTORE_PKCS12 -srcstoretype pkcs12 -destkeystore $KEYSTORE_FILE -deststoretype pkcs12 -storepass $KEYSTORE_PASSWORD -srcstorepass $KEYSTORE_PASSWORD"
                                ],
                                "command": [
                                    "/bin/bash"
                                ],
                                "env": [
                                    {
                                        "name": "TLS_KEY_FILE",
                                        "value": "/var/run/secrets/openshift.io/serviceaccount/tls.key"
                                    },
                                    {
                                        "name": "CRT_FILE",
                                        "value": "/var/run/secrets/openshift.io/serviceaccount/tls.crt"
                                    },
                                    {
                                        "name": "KEYSTORE_PKCS12",
                                        "value": "/var/run/secrets/java.io/keystores/keystore.pkcs12"
                                    },
                                    {
                                        "name": "KEYSTORE_FILE",
                                        "value": "/var/run/secrets/java.io/keystores/${APPLICATION_NAME}.p12"
                                    },
                                    {
                                        "name": "KEYSTORE_PASSWORD",
                                        "value": "${APPLICATION_NAME}"
                                    }
                                ],
                                "image": "registry.access.redhat.com/redhat-sso-7/sso71-openshift:1.1-16",
                                "name": "pem-to-keystore",
                                "volumeMounts": [
                                    {
                                        "mountPath": "/var/run/secrets/java.io/keystores",
                                        "name": "srv-data"
                                    },
                                    {
                                        "mountPath": "/var/run/secrets/openshift.io/serviceaccount",
                                        "name": "service-certs"
                                    }
                                ]
                            }
                        ],
                        "terminationGracePeriodSeconds": 60,
                        "volumes": [
                            {
                                "name": "service-certs",
                                "secret": {
                                    "secretName": "service-certs"
                                }
                            }
                        ]
                    }
                },
                "triggers": [
                    {
                        "type": "ConfigChange"
                    }
                ],
                "volumeClaimTemplates": [
                    {
                        "metadata": {
                            "name": "srv-data"
                        },
                        "spec": {
                            "accessModes": [
                                "ReadWriteOnce"
                            ],
                            "resources": {
                                "requests": {
                                    "storage": "1Gi"
                                }
                            }
                        }
                    }
                ]
            }
        }
    ],
    "parameters": [
        {
            "description": "The name for the application.",
            "displayName": "Application Name",
            "name": "APPLICATION_NAME",
            "required": true,
            "value": "caching-service-app"
        },
        {
            "description": "Infinispan image.",
            "name": "IMAGE",
            "required": true,
            "value": "registry.access.redhat.com/datagrid-7-tech-preview/datagrid-services"
        },
        {
            "description": "Number of instances in the cluster.",
            "displayName": "Number of Instances",
            "name": "NUMBER_OF_INSTANCES",
            "required": true,
            "value": "1"
        },
        {
            "description": "Total container memory in MiB.",
            "displayName": "Total Memory",
            "name": "TOTAL_CONTAINER_MEM",
            "required": false,
            "value": "512"
        },
        {
            "description": "Username for client applications",
            "displayName": "Client User",
            "name": "APPLICATION_USER",
            "required": true
        },
        {
            "description": "Password for client applications",
            "displayName": "Client Password",
            "from": "[a-zA-Z0-9]{16}",
            "generate": "expression",
            "name": "APPLICATION_USER_PASSWORD"
        }
    ]
}